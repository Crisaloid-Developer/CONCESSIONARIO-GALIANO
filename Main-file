#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Auto {
    string targa;
    string modello;
    string marca;
    int cavalli;
    int cilindrata;
    int kmPercorsi;
};

class Concessionario {
private:
    vector<Auto> magazzino;

public:
    void aggiungiAuto(const Auto& autoDaAggiungere) {
        magazzino.push_back(autoDaAggiungere);
    }

    void visualizzaMagazzino() const {
        cout << "\nMagazzino attuale:\n";
        for (size_t i = 0; i < magazzino.size(); ++i) {
            visualizzaAuto(magazzino[i]);
        }
    }

    void vendiAuto(int indice) {
        if (indice >= 0 && indice < static_cast<int>(magazzino.size())) {
            magazzino.erase(magazzino.begin() + indice);
            cout << "Auto venduta con successo.\n";
        } else {
            cout << "Indice non valido.\n";
        }
    }

private:
    void visualizzaAuto(const Auto& autoInVendita) const {
        cout << "Targa: " << autoInVendita.targa << ", Modello: " << autoInVendita.modello << ", Marca: " << autoInVendita.marca
             << ", Cavalli: " << autoInVendita.cavalli << ", Cilindrata: " << autoInVendita.cilindrata << ", KM Percorsi: " << autoInVendita.kmPercorsi << endl;
    }
};

Auto inserisciDatiAuto() {
    Auto nuovaAuto;
    cout << "Inserisci i dati della nuova auto:" << endl;
    // Richiedi l'inserimento della targa finché non è di lunghezza corretta
    do {
        cout << "Targa (lunghezza esatta di 7 caratteri): ";
        cin >> nuovaAuto.targa;
        if (nuovaAuto.targa.length() != 7) {
            cout << "La targa deve essere lunga esattamente 7 caratteri. Riprova.\n";
        }
    } while (nuovaAuto.targa.length() != 7);

    // Richiedi l'inserimento del modello finché non è di lunghezza corretta
    do {
        cout << "Modello (lunghezza minima 3 caratteri, massima 10 caratteri): ";
        cin >> nuovaAuto.modello;
        if (nuovaAuto.modello.length() < 3 || nuovaAuto.modello.length() > 10) {
            cout << "Il modello deve avere una lunghezza compresa tra 3 e 10 caratteri. Riprova.\n";
        }
    } while (nuovaAuto.modello.length() < 3 || nuovaAuto.modello.length() > 10);

    // Richiedi l'inserimento della marca finché non è di lunghezza corretta
    do {
        cout << "Marca (lunghezza minima 2 caratteri, massima 10 caratteri): ";
        cin >> nuovaAuto.marca;
        if (nuovaAuto.marca.length() < 2 || nuovaAuto.marca.length() > 10) {
            cout << "La marca deve avere una lunghezza compresa tra 2 e 10 caratteri. Riprova.\n";
        }
    } while (nuovaAuto.marca.length() < 2 || nuovaAuto.marca.length() > 10);

    cout << "Cavalli: ";
    cin >> nuovaAuto.cavalli;
    cout << "Cilindrata: ";
    cin >> nuovaAuto.cilindrata;
    cout << "KM Percorsi: ";
    cin >> nuovaAuto.kmPercorsi;
    return nuovaAuto;
}
int main() {
    Concessionario concessionario;

    int scelta;
    do {
        cout << "\nMenu:\n";
        cout << "1. Aggiungi auto\n";
        cout << "2. Visualizza magazzino\n";
        cout << "3. Vendita auto\n";
        cout << "4. Esci\n";
        cout << "Scelta: ";
        cin >> scelta;

        switch (scelta) {
            case 1: {
                Auto nuovaAuto = inserisciDatiAuto();
                concessionario.aggiungiAuto(nuovaAuto);
                cout << "Auto aggiunta con successo.\n";
                break;
            }
            case 2:
                concessionario.visualizzaMagazzino();
                break;
            case 3: {
                int indice;
                cout << "Inserisci l'indice dell'auto da vendere: ";
                cin >> indice;
                concessionario.vendiAuto(indice);
                break;
            }
            case 4:
                cout << "Arrivederci!\n";
                break;
            default:
                cout << "Scelta non valida.\n";
        }
    } while (scelta != 4);

    return 0;
}
